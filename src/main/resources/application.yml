spring:
  application:
    name: shopcuathuy-backend
  
  profiles:
    active: dev
  
  # Database Configuration
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:shopcuathuy}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
  
  # Cache Configuration
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=1h
  
  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}
    connection-timeout: 15000
    listener:
      simple:
        acknowledge-mode: auto
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 1000
          max-interval: 10000
          multiplier: 2
  
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
  
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:50MB}
      enabled: true

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
    session:
      timeout: 30m
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

# Logging Configuration
logging:
  level:
    com.shopcuathuy: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: ${HIBERNATE_SQL_LOG:false}
    org.hibernate.type.descriptor.sql.BasicBinder: ${HIBERNATE_SQL_LOG:false}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/shopcuathuy-backend.log
    max-size: 10MB
    max-history: 30

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:mySecretKey}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  
  file:
    upload-dir: ${FILE_UPLOAD_DIR:uploads/}
    max-size: ${FILE_MAX_SIZE:10485760} # 10MB
    allowed-types: ${FILE_ALLOWED_TYPES:jpg,jpeg,png,gif,webp,pdf,doc,docx}
  
  payment:
    vnpay:
      tmn-code: ${VNPAY_TMN_CODE:}
      hash-secret: ${VNPAY_HASH_SECRET:}
      url: ${VNPAY_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}
      return-url: ${VNPAY_RETURN_URL:http://localhost:3000/payment/return}
    stripe:
      secret-key: ${STRIPE_SECRET_KEY:}
      publishable-key: ${STRIPE_PUBLISHABLE_KEY:}
      webhook-secret: ${STRIPE_WEBHOOK_SECRET:}
    paypal:
      client-id: ${PAYPAL_CLIENT_ID:}
      client-secret: ${PAYPAL_CLIENT_SECRET:}
      mode: ${PAYPAL_MODE:sandbox}
  
      minio:
        endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
        access-key: ${MINIO_ACCESS_KEY:minioadmin}
        secret-key: ${MINIO_SECRET_KEY:minioadmin}
        bucket-name: ${MINIO_BUCKET:shopcuathuy}
        secure: ${MINIO_SECURE:false}
      
      jwt:
        secret: ${JWT_SECRET:mySecretKey}
        expiration: ${JWT_EXPIRATION:86400000}
        refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}
  
  elasticsearch:
    host: ${ELASTICSEARCH_HOST:localhost}
    port: ${ELASTICSEARCH_PORT:9200}
    index: ${ELASTICSEARCH_INDEX:shopcuathuy}
  
  notification:
    email:
      from: ${EMAIL_FROM:noreply@shopcuathuy.com}
      from-name: ${EMAIL_FROM_NAME:ShopCuaThuy}
    sms:
      provider: ${SMS_PROVIDER:twilio}
      twilio:
        account-sid: ${TWILIO_ACCOUNT_SID:}
        auth-token: ${TWILIO_AUTH_TOKEN:}
        phone-number: ${TWILIO_PHONE_NUMBER:}

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  packages-to-scan: com.shopcuathuy.controller

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  
  h2:
    console:
      enabled: true
      path: /h2-console

logging:
  level:
    com.shopcuathuy: DEBUG
    org.springframework.web: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate
  
  datasource:
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10

logging:
  level:
    com.shopcuathuy: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: false

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  
  data:
    redis:
      host: localhost
      port: 6379
      database: 1
  
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

logging:
  level:
    com.shopcuathuy: DEBUG
